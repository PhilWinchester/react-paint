import React, { Component } from 'react';
import ReactDOM from 'react-dom';
// const PropTypes = React.PropTypes;

export default class DrawCanvas extends Component {
  propTypes: {
    brushColor: PropTypes.string,
    lineWidth: PropTypes.number,
    canvasStyle: PropTypes.shape({
      backgroundColor: PropTypes.string,
      cursor: PropTypes.string
    }),
    clear: PropTypes.bool
  },
  getDefaultProps() {
    return {
      brushColor: '#000000',
      lineWidth: 4,
      canvasStyle: {
        backgroundColor: '#FFFFFF',
        cursor: 'pointer'
      },
      clear: false
    };
  },
  getInitialState(){
    return {
      canvas: null,
      context: null,
      drawing: false,
      lastX: 0,
      lastY: 0,
      history: []
    };
  },

  constructor() {
    super();

    this.state = {
      canvas: null,
      context: null,
      drawing: false,
      lastX: 0,
      lastY: 0,
      history: [],
    };
  }

  componentDidMount() {
    const canvas = ReactDOM.findDOMNode(this);

    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    const ctx = canvas.getContext('2d');

    this.setState({
      canvas,
      context: ctx,
    });
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.clear) {
      this.resetCanvas();
    }
  }

  getDefaultStyle() {
    return {
      backgroundColor: 'white',
      cursor: 'pointer',
    };
  }

  handleOnMouseDown(e) {
    const rect = this.state.canvas.getBoundingClientRect();
    this.state.context.beginPath();
    this.setState({
      lastX: e.clientX - rect.left,
      lastY: e.clientY - rect.top,
      drawing: true,
    });
  }

  handleOnMouseMove(e) {
    if (this.state.drawing) {
      const rect = this.state.canvas.getBoundingClientRect();
      const lastX = this.state.lastX;
      const lastY = this.state.lastY;
      const currentX = e.clientX - rect.left;
      const currentY = e.clientY - rect.top;


      this.draw(lastX, lastY, currentX, currentY);
      this.setState({
        lastX: currentX,
        lastY: currentY,
      });
    }
  }

  handleonMouseUp() {
    this.setState({
      drawing: false,
    });
  }

  draw(lX, lY, cX, cY) {
    this.state.context.strokeStyle = '#000000';
    this.state.context.lineWidth = 4;
    this.state.context.moveTo(lX, lY);
    this.state.context.lineTo(cX, cY);
    this.state.context.stroke();
  }

  resetCanvas() {
    const width = this.state.context.canvas.width;
    const height = this.state.context.canvas.height;
    this.state.context.clearRect(0, 0, width, height);
  }


  canvasStyle() {
    const defaults = this.getDefaultStyle();
    // let custom = this.props.canvasStyle;
    return Object.assign({}, defaults);
  }

  render() {
    return (
      <canvas
        style={this.canvasStyle()}
        onMouseDown={this.handleOnMouseDown}
        onTouchStart={this.handleOnMouseDown}
        onMouseMove={this.handleOnMouseMove}
        onTouchMove={this.handleOnMouseMove}
        onMouseUp={this.handleonMouseUp}
        onTouchEnd={this.handleonMouseUp}
      />
    );
  }
}
